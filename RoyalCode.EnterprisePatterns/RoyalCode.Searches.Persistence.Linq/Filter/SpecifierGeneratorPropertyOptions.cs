using System.Linq.Expressions;
using System.Reflection;

namespace RoyalCode.Searches.Persistence.Linq.Filter;

/// <summary>
/// <para>
///     Options used by the default <see cref="ISpecifierFunctionGenerator"/> 
///     to generate the function for apply the filter into the model.
/// </para>
/// <para>
///     It is used for autogenerated <see cref="ISpecifier{TModel, TFilter}"/>.
/// </para>
/// <para>
///     This options contains information a property of the filter.
/// </para>
/// </summary>
/// <typeparam name="TModel">The type of the model.</typeparam>
/// <typeparam name="TFilter">The type of the filter.</typeparam>
public class SpecifierGeneratorPropertyOptions<TModel, TFilter>
{
    internal SpecifierGeneratorPropertyOptions(PropertyInfo propertyInfo)
    {
        PropertyInfo = propertyInfo;
    }

    internal PropertyInfo PropertyInfo { get; }

    internal Delegate? PredicateFactory { get; set; }
}

/// <inheritdoc />
public class SpecifierGeneratorPropertyOptions<TModel, TFilter, TProperty> : SpecifierGeneratorPropertyOptions<TModel, TFilter>
{
    internal SpecifierGeneratorPropertyOptions(PropertyInfo propertyInfo)
        : base(propertyInfo)
    { }

    /// <summary>
    /// Adds a function that create the predicate to apply the filter into the model.
    /// </summary>
    /// <param name="predicateFactory">The function that create the predicate.</param>
    public void Predicate(Func<TProperty, Expression<Func<TModel, bool>>> predicateFactory)
    {
        PredicateFactory = predicateFactory;
    }
}